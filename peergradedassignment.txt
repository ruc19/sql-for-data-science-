Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

/*(using COUNT(*))*/
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.


/* using select count(DISTINCT id) 
from business; */

i. Business = 10000
ii. Hours = 1562 -- using business id 
iii. Category = 2643 -- using business id  
iv. Attribute = 1115 -- using business id
v. Review = 10000 -- using id
vi. Checkin = 493 -- using business id
vii. Photo = 10000 -- using id
viii. Tip = 537 -- using user id
ix. User = 10000 -- using id
x. Friend = 11 -- using user id
xi. Elite_years = 2780 -- using user id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: "no"
	
	
	SQL code used to arrive at answer:
	
	SELECT COUNT(*)
FROM user
WHERE id IS NULL 
OR name IS NULL 
OR review_count IS NULL 
OR yelping_since IS NULL 
OR useful IS NULL 
OR funny IS NULL 
OR cool IS NULL 
OR fans IS NULL 
OR average_stars IS NULL 
OR compliment_hot IS NULL 
OR compliment_more IS NULL 
OR compliment_profile IS NULL 
OR compliment_cute IS NULL 
OR compliment_list IS NULL 
OR compliment_note IS NULL 
OR compliment_plain IS NULL 
OR compliment_cool IS NULL 
OR compliment_funny IS NULL 
OR compliment_writer IS NULL 
OR compliment_photos IS NULL; 

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995


        /* using SELECT (MAX/MIN/AVG)(Column) 
                 FROM Table; */
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 

	SELECT City, 
 	SUM(review_Count) AS totalreviews
	FROM business 
	GROUP BY City
 	ORDER BY totalreviews DESC; 
	
	
	Copy and Paste the Result Below:
	+-----------------+--------------+
| city            | totalreviews |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars,
SUM(review_count) AS count
FROM business
WHERE city == 'Avon'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     6 |
|   3.5 |    88 |
|   4.0 |    21 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars,
SUM(review_count) AS count
FROM business
WHERE city == 'Beachwood'
GROUP BY stars; 

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |    11 |
|   3.5 |     6 |
|   4.0 |    69 |
|   4.5 |    17 |
|   5.0 |    23 |
+-------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT Name, 
	review_count 
	FROM user 
	ORDER BY review_count DESC
	LIMIT 3; 
		
	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+


8. Does posing more reviews correlate with more fans?

Yes but posing number of fans isn't solely dependant on posing more reviews but on a lot of other factors such as since when they have been yelping 
and average star rating too.

	Please explain your findings and interpretation of the results:
	
/* SELECT name, 
review_count, 
fans, 
average_stars, 
yelping_since 
FROM user 
ORDER BY fans DESC; */

+-----------+--------------+------+---------------+---------------------+
| name      | review_count | fans | average_stars | yelping_since       |
+-----------+--------------+------+---------------+---------------------+
| Amy       |          609 |  503 |          3.21 | 2007-07-19 00:00:00 |
| Mimi      |          968 |  497 |          4.05 | 2011-03-30 00:00:00 |
| Harald    |         1153 |  311 |           4.4 | 2012-11-27 00:00:00 |
| Gerald    |         2000 |  253 |           3.6 | 2012-12-16 00:00:00 |
| Christine |          930 |  173 |          3.69 | 2009-07-08 00:00:00 |
| Lisa      |          813 |  159 |          4.09 | 2009-10-05 00:00:00 |
| Cat       |          377 |  133 |          3.99 | 2009-02-05 00:00:00 |
| William   |         1215 |  126 |          4.41 | 2015-02-19 00:00:00 |
| Fran      |          862 |  124 |           4.1 | 2012-04-05 00:00:00 |
| Lissa     |          834 |  120 |          3.68 | 2007-08-14 00:00:00 |
| Mark      |          861 |  115 |          3.36 | 2009-05-31 00:00:00 |
| Tiffany   |          408 |  111 |          4.09 | 2008-10-28 00:00:00 |
| bernice   |          255 |  105 |          3.95 | 2007-08-29 00:00:00 |
| Roanna    |         1039 |  104 |          3.71 | 2006-03-28 00:00:00 |
| Angela    |          694 |  101 |          3.89 | 2010-10-01 00:00:00 |
| .Hon      |         1246 |  101 |          3.14 | 2006-07-19 00:00:00 |
| Ben       |          307 |   96 |           3.7 | 2007-03-10 00:00:00 |
| Linda     |          584 |   89 |          4.06 | 2005-08-07 00:00:00 |
| Christina |          842 |   85 |           4.1 | 2012-10-08 00:00:00 |
| Jessica   |          220 |   84 |           4.1 | 2009-01-12 00:00:00 |
| Greg      |          408 |   81 |          3.67 | 2008-02-16 00:00:00 |
| Nieves    |          178 |   80 |          3.64 | 2013-07-08 00:00:00 |
| Sui       |          754 |   78 |          3.62 | 2009-09-07 00:00:00 |
| Yuri      |         1339 |   76 |          4.11 | 2008-01-03 00:00:00 |
| Nicole    |          161 |   73 |          3.87 | 2009-04-30 00:00:00 |
+-----------+--------------+------+---------------+---------------------+
(Output limit exceeded, 25 of 10000 total rows shown)
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
+-------------+
| lovereviews |
+-------------+
|        1780 |
+-------------+

+-------------+
| hatereviews |
+-------------+
|         232 |
+-------------+
	
	SQL code used to arrive at answer:

	SELECT COUNT(*) AS lovereviews 
	FROM review 
	WHERE text LIKE '%love%'; 

	SELECT COUNT(*) AS hatereviews 
	FROM review 
	WHERE text LIKE '%hate%'; 
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT name, 
fans 
FROM user 
ORDER BY fans DESC 
LIMIT 10; 
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
The two groups had a different distribution of hours. The group with lower rating had longer work hours than the one with higher rating in this case 
(though the result might be biased as there were only two of the category in that city). 

ii. Do the two groups you chose to analyze have a different number of reviews?
    The one with 4 - 5 stars had more reviews than the one with 2 - 3 stars. 
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

upon checking for different categories, it was noticeable that businesses in the souteast side had a higher rating than the businesses in the eastside significantly. 

SQL code used for analysis:

SELECT h.hours, 
b.city, 
b.stars, 
b.review_count, 
b.neighborhood, 
CASE 
WHEN b.stars between 2 and 3 then 'two-threestars' 
when b.stars between 4 and 5 then 'four-fivestars'
end as categorystars                                  -- DIVIDING INTO TWO GROUPS
FROM business b 
INNER JOIN hours h
ON b.id = h.business_id 
INNER JOIN Category c 
ON b.id = c.business_id 
WHERE b.city == 'Las Vegas'  -- SELECTED CITY WAS LAS VEGAS
AND c.category == 'Food'     -- SELECTED CATEGORY WAS FOOD 
AND ((b.stars between 2 and 3) or (b.stars between 4 and 5)) -- ONLY CONSIDERING SHOPS HAVING STAR RATING FROM 2 - 5 
ORDER BY hours, categorystars; 
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
open businesses had a higher average star rating than closed businesses. 
         
ii. Difference 2:
         
Open businesses had higher average review count than closed businesses. 
         
SQL code used for analysis:

SELECT   
AVG(stars), 
AVG(review_count), 
is_open
FROM business
GROUP BY is_open;

	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         I tried to analyse the attributes of businesses in arizona which lead to a higher star rating in the state of Arizona. 
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
I analysed the attributes ranging from, wifi availability, wheel chair access, 
outdoor seating, whether the business accepts credit cards and bitcoin, coat check, and business parking. 
out of these attributes, i found a few of them to not be related to star rating such as wheel chair access, coat check and 
whether the business accepts credit cards and bitcoin which i then eliminated from the dataset. The star rating appeared to be dependant on the rest of the dataset. 
Another wierd observation was the contrary to the belief, businesses with no WiFI tended to perform better than Businesses with 
free WiFi ( maybe due to excess usage, the speed of the WiFi might be slow lading to negative reviews and lesser ratings). This dataset can further be used to predict the success
of a business.  

                  
iii. Output of your finished dataset:
    
descending order of stars 
+------------------------+-----------------+--------------------------------------------------------------------------------------+-------+--------------+
| business_id            | name            | value                                                                                | state | AVG(b.stars) |
+------------------------+-----------------+--------------------------------------------------------------------------------------+-------+--------------+
| 0oDfGJPbqdSigRwIFM-RoQ | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          5.0 |
| 1es8u2NyeuXpDqWaUXMbnw | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": false, "valet": false} | AZ    |          5.0 |
| 1mkDrJRu3VABKy95gxD-Hg | WiFi            | no                                                                                   | AZ    |          4.5 |
| 1mkDrJRu3VABKy95gxD-Hg | OutdoorSeating  | 1                                                                                    | AZ    |          4.5 |
| 1mkDrJRu3VABKy95gxD-Hg | HasTV           | 1                                                                                    | AZ    |          4.5 |
| 1mkDrJRu3VABKy95gxD-Hg | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          4.5 |
| 0kyhbUW6NkpYjJzFBZ64vQ | WiFi            | no                                                                                   | AZ    |          4.0 |
| 2skQeu3C36VCiB653MIfrw | WiFi            | no                                                                                   | AZ    |          4.0 |
| 0kyhbUW6NkpYjJzFBZ64vQ | OutdoorSeating  | 1                                                                                    | AZ    |          4.0 |
| 1AxEmgv8Dsr3iU9Aa40jPw | OutdoorSeating  | 1                                                                                    | AZ    |          4.0 |
| 2skQeu3C36VCiB653MIfrw | OutdoorSeating  | 0                                                                                    | AZ    |          4.0 |
| 0kyhbUW6NkpYjJzFBZ64vQ | HasTV           | 1                                                                                    | AZ    |          4.0 |
| 1AxEmgv8Dsr3iU9Aa40jPw | HasTV           | 1                                                                                    | AZ    |          4.0 |
| 2skQeu3C36VCiB653MIfrw | HasTV           | 1                                                                                    | AZ    |          4.0 |
| 0kyhbUW6NkpYjJzFBZ64vQ | BusinessParking | {"garage": false, "street": true, "validated": false, "lot": true, "valet": false}   | AZ    |          4.0 |
| 1AxEmgv8Dsr3iU9Aa40jPw | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          4.0 |
| 2skQeu3C36VCiB653MIfrw | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          4.0 |
| 01xXe2m_z048W5gcBFpoJA | WiFi            | no                                                                                   | AZ    |          3.5 |
| 11bhfBbcFypczdz3N_w6iw | WiFi            | no                                                                                   | AZ    |          3.5 |
| 01xXe2m_z048W5gcBFpoJA | OutdoorSeating  | 1                                                                                    | AZ    |          3.5 |
| 11bhfBbcFypczdz3N_w6iw | OutdoorSeating  | 1                                                                                    | AZ    |          3.5 |
| 01xXe2m_z048W5gcBFpoJA | HasTV           | 0                                                                                    | AZ    |          3.5 |
| 11bhfBbcFypczdz3N_w6iw | HasTV           | 0                                                                                    | AZ    |          3.5 |
| -ayZoW_iNDsunYXX_0x1YQ | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          3.5 |
| 01xXe2m_z048W5gcBFpoJA | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          3.5 |
+------------------------+-----------------+--------------------------------------------------------------------------------------+-------+--------------+

ascending order of stars. 
+------------------------+-----------------+--------------------------------------------------------------------------------------+-------+--------------+
| business_id            | name            | value                                                                                | state | AVG(b.stars) |
+------------------------+-----------------+--------------------------------------------------------------------------------------+-------+--------------+
| 1Ds8V2c7LlwSAA3O-9f4cA | WiFi            | free                                                                                 | AZ    |          2.0 |
| 1Ds8V2c7LlwSAA3O-9f4cA | OutdoorSeating  | 0                                                                                    | AZ    |          2.0 |
| 1Ds8V2c7LlwSAA3O-9f4cA | HasTV           | 0                                                                                    | AZ    |          2.0 |
| 1Ds8V2c7LlwSAA3O-9f4cA | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": false, "valet": false} | AZ    |          2.0 |
| 25lVJgvthMyvoRz-W6splw | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": false, "valet": false} | AZ    |          2.0 |
| 0-TtzWmjREl7lIKDcmGONQ | WiFi            | free                                                                                 | AZ    |          2.5 |
| 0-TtzWmjREl7lIKDcmGONQ | OutdoorSeating  | 1                                                                                    | AZ    |          2.5 |
| 0YWsZ1Ie9e04DFfzFij7yQ | OutdoorSeating  | 0                                                                                    | AZ    |          2.5 |
| 0-TtzWmjREl7lIKDcmGONQ | HasTV           | 1                                                                                    | AZ    |          2.5 |
| 0-TtzWmjREl7lIKDcmGONQ | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": false, "valet": false} | AZ    |          2.5 |
| 0YWsZ1Ie9e04DFfzFij7yQ | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": false, "valet": false} | AZ    |          2.5 |
| 0AJF-USLN6K5T4caooDdjw | WiFi            | free                                                                                 | AZ    |          3.0 |
| 2JV0xGXsszojof2BuEt_hw | WiFi            | free                                                                                 | AZ    |          3.0 |
| 0AJF-USLN6K5T4caooDdjw | OutdoorSeating  | 1                                                                                    | AZ    |          3.0 |
| 2JV0xGXsszojof2BuEt_hw | OutdoorSeating  | 1                                                                                    | AZ    |          3.0 |
| 2JV0xGXsszojof2BuEt_hw | HasTV           | 1                                                                                    | AZ    |          3.0 |
| 0AJF-USLN6K5T4caooDdjw | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          3.0 |
| 2JV0xGXsszojof2BuEt_hw | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": false, "valet": false} | AZ    |          3.0 |
| 01xXe2m_z048W5gcBFpoJA | WiFi            | no                                                                                   | AZ    |          3.5 |
| 11bhfBbcFypczdz3N_w6iw | WiFi            | no                                                                                   | AZ    |          3.5 |
| 01xXe2m_z048W5gcBFpoJA | OutdoorSeating  | 1                                                                                    | AZ    |          3.5 |
| 11bhfBbcFypczdz3N_w6iw | OutdoorSeating  | 1                                                                                    | AZ    |          3.5 |
| 01xXe2m_z048W5gcBFpoJA | HasTV           | 0                                                                                    | AZ    |          3.5 |
| 11bhfBbcFypczdz3N_w6iw | HasTV           | 0                                                                                    | AZ    |          3.5 |
| -ayZoW_iNDsunYXX_0x1YQ | BusinessParking | {"garage": false, "street": false, "validated": false, "lot": true, "valet": false}  | AZ    |          3.5 |
+------------------------+-----------------+--------------------------------------------------------------------------------------+-------+--------------+
(Output limit exceeded, 25 of 45 total rows shown)

iv. Provide the SQL code you used to create your final dataset:


select a.business_id, 
a.name, 
a.value, 
b.state, 
AVG(b.stars)
from attribute a 
INNER JOIN business b 
ON (a.business_id == b.id) AND (b.state == 'AZ')
where a.name in ( 'OutdoorSeating', 'HasTV', 'BusinessParking', 'WiFi')
group by business_id, a.name
order by AVG(b.stars) , a.name desc;


-- WiFi(no, free, paid), WheelchairAccessible(1,0), OutdoorSeating(1, 0), HasTV(1, 0), BusinessAcceptsCreditCards(0, 1), BusinessParking(garage, street, validated, lot, valet), coatcheck(0,1) 